{
  "title": "Методы массива HTMLixArray",
  "text": "* `.add(props, insertLocation)` - создает новый контейнер со свойствами props в указанной позиции \"insertLocation\" в массиве, если не указать позицию то создаст контейнер в конце массива;\r\n\r\n* `.removeIndex(indexArray, widthChild)` - удаляет несколько контейнеров из массива, indexArray - массив с индексами контейнеров для удаления, widthChild - если передать параметром whithChild=true удаляет также дочерние контейнеры, находящиеся в свойствах с типами: \"group\" и \"render-variant\";\r\n\r\n* `.removeAll( widthChild)` - удаляет все контейнеры из массива,  widthChild - если передать параметром whithChild=true удаляет также дочерние контейнеры, находящиеся в свойствах с типами: \"group\" и \"render-variant\";\r\n\r\n* `.reuseAll(arrayWithObjects)` - переиспользует уже существующие в массиве контейнеры, меняя их props совпавшие с ключами объектов из массива arrayWithObjects, если новых объектов меньше чем контейнеров то удаляет лишние контейнеры, если больше то добавляет. Бывает полезен для того чтобы не очищать постоянно массив, и не добавлять новые контейнеры, там где этого не требуется;\r\n\r\n* `.getAll(map_Object)` - возвращает массив объектов ключами которых являются свойства контейнеров, а значениями данные полученные из метода getProp(), для каждого свойства, map_Object - список только необходимых свойств, если не передать получит все свойства. Работает на основе метода контейнера getAllProps;\r\n\r\n* `.order(newOrderArr)` - изменяет порядок контейнеров в массиве и html разметке на новый, newOrderArr- массив со 'старыми' индексами контейнеров в новом порядке, например [3,2,0,1];\r\n"
}