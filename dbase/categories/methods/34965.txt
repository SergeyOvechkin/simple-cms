{
  "title": "Методы пользовательских событий",
  "text": "Доступ из любой точки приложения осуществляется по имени пользовательского события: \r\n`this.rootLink.eventProps[\"emiter-имя-события\"]`\r\n\r\nДоступ из свойства - слушателя события осуществляется: `this.emiter`\r\n\r\n* `.emit()` - вызывает событие для всех слушателей;\r\n\r\n* `.setEventProp(\"новые данные\")` - вызывает событие для всех слушателей и меняет переменную this.rootLink.eventProps[\"emiter-имя-события\"].prop на новые данные,\r\nполучить новые данные в слушателе события можно с помощью this.emiter.prop или this.emiter.getEventProp();\r\n\r\n* `.getEventProp()` - получает данные пользовательского события;\r\n\r\n\r\nСлушателями пользовательских событий могут быть, как свойства  контейнера , так и свойства массива;\r\n\r\nЭмитеру пользовательского события можно добавить поведение - метод который будет срабатывать пред вызовом emit для всех слушетелей.\r\n \r\n* `behavior()` метод добавляется к эмитеру событий, если возвращает false событие не будет вызвано, пример использования:\r\n\r\n```\r\n  eventEmiters: { \r\n\r\n //событие для смены типа навигации\r\n\r\n\t\t[\"emiter-navigation-type\"] : {\r\n\t\t\tprop: \"\",\r\n\t\t\t\r\n\t\t\tbehavior: function(){\r\n\t\t\t\t//если ширина экрана меньше 600 px событие не сработает\r\n\t\t\t\tif(window.innerWidth < 600 && this.prop == \"top-menu\")return false;\r\n\t\t\t\t\r\n\t\t\t\tthis.rootLink.stateProperties.NAVIGATION_TYPE = this.prop;\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n},\r\n\r\n```\r\n\r\n"
}