{
  "title": "render-variant",
  "text": "Открыв в консоли свойство с типом render-variant в нем будут следующие поля:\r\n\r\n* `renderChild` - ссылка на текущий компонент отображаемый в данном свойстве;\r\n\r\nВ отображаемом компоненте также добавилось поле renderParent\r\n\r\n* `renderParent` - ссылка на свойство в котором отображается данный компонент;\r\n\r\nТакже у свойства с типом render-variant есть несколько дополнительных методов: \r\n\r\n\r\n`.render(nameComponent=string)` - отображает компонент с именем \"nameComponent\" (используется только для отображения компонентов)\r\n\r\n\r\n`.renderByContainer(containerLink=container)` - отображает контейнер из виртуального массива по ссылке (используется только для отображения контейнеров из виртуальных массивов);\r\n\r\n\r\n`.setOrCreateAndRender(objWidthProps)` - меняет отображаемый компонента на objWidthProps.componentName и устанавливает ему новые значения свойств;\r\n\r\n\r\n* objWidthProps - объект с новыми значениями для свойств, где имена ключей объекта должны совпадать с названиями устанавливаемых свойств, objWidthProps.componentName - обязательное поле объекта, которое содержит имя отображаемого компонента, если отображаемый компонент является контейнером из виртуального массива здесь указывается имя виртуального массива. Если отображаемый компонент является обычным массивом, \r\n здесь также нужно указать поле data - массив с объектами, ключами которых являются новые свойства для контейнеров.\r\n\r\n\r\n* если `objWidthProps.componentName` - обычный контейнер(renderType=\"container-outer\") - устанавливает ему свойства совпавшие с ключами в объекте objWidthProps,\r\nвызвав у него метод `setAllProps(objWidthProps)` а затем метод `render(objWidthProps.componentName)`;\r\n\r\n\r\n* если `objWidthProps.componentName` - виртуальный массив(renderType=\"virtual-array\")  то удалит старый отображаемый контейнер в свойстве и создаст новый  из виртуального массива вызвав метод  массива `container=componentName.add(objWidthProps)` затем вызовет метод `.renderByContainer(containerLink=container)`, \r\n\r\n\r\n* если `objWidthProps.componentName` - обычный массив(renderType=\"array\"), отображает в свойстве данный массив и вызывает у него метод `reuseAll(objWidthProps.data)`,\r\nпередав в него массив `data` из объекта `objWidthProps` с новыми данными для контеййнеров.\r\n\r\n\r\n\r\n\r\n**.setProp(newElement)** - метод определит тип данных и затем вызовет нужный метод из перечисленных выше,\r\n * для текста .render (переключает одиночные контейнеры и массивы newElement=text), \r\n* для контейнера из виртуального массива .renderByContainer(newElement=container);\r\n* для объекта, с присутствующим полем newElement.componentName будет вызван .setOrCreateAndRender(newElement)\r\n\r\n**.getProp()** - если отображаемый элемент является контейнером,  вызывает у него метод .getAllProps(), если отображаемый элемент является массивом,  вызывает у него метод метод .getAll(),\r\nтем самым получает значения всех свойств из отображаемого элемента, если передать параметром mapObject={key1: \"\", key2: {ke1: \"\"} } `.getProp(mapObject)`,\r\n вернет свойства только совпадающие по названиям с key, таким образом можно получить развернутый объект со всеми значениями свойств либо со всеми нужными значениями свойств из отображаемого элемента; \r\n\r\n\r\n**.removeProp()** - убирает компонент из видимости, если это контейнер из виртуального массива (renderType == \"container-inner\") удаляет его;\r\n"
}