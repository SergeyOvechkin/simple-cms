{
  "title": "Дополнительные методы для свойств - событий",
  "text": "Для свойств являющихся стандартными событиями:\r\n\r\n* `this.disableEvent(eventName)` - временно отключить событие eventName на данном свойстве;\r\n\r\n* `this.enableEvent(eventName)` - включает отключенное событие;\r\n\r\n* `emitEvent(eventName)` - сгенерировать событие eventName на данном свойстве;\r\n\r\nДля пользовательских событий:\r\n\r\n* `this.disableEvent()` - временно отключить прослушивание пользовательского события на данном свойстве;\r\n\r\n* `this.enableEvent()` - включает отключенное событие;\r\n\r\n* `behavior()` метод добавляется к эмитеру событий, если возвращает false событие не будет вызвано, пример использования:\r\n\r\n```\r\n  eventEmiters: { \r\n\r\n //событие для смены типа навигации\r\n\r\n\t\t[\"emiter-navigation-type\"] : {\r\n\t\t\tprop: \"\",\r\n\t\t\t\r\n\t\t\tbehavior: function(){\r\n\t\t\t\t//если ширина экрана меньше 600 px событие не сработает\r\n\t\t\t\tif(window.innerWidth < 600 && this.prop == \"top-menu\")return false;\r\n\t\t\t\t\r\n\t\t\t\tthis.rootLink.stateProperties.NAVIGATION_TYPE = this.prop;\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n},\r\n\r\n```\r\n\r\n"
}