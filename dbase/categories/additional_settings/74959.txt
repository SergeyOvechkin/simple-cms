{
  "title": "HtmlixRouter ",
  "text": "\r\nВ Htmlix можно использовать роутер для обновления истории, а также смены отображаемых компонентов в зависимости от переданного url.\r\n\r\nРоутер создается в экжемпляре приложения, в поле `.router`, для этого нужно использовать  функцию `HtmlixRouter(StateMap, routes)` которя возвращает \r\nэкземпляр `HtmlixState` с новым полем `.router`. Первый параметр StateMap - объект описания приложения, routes - объект с картой роутов, ключами которого \r\nявляются маршруты с которыми в будущем будет сравниваться url при изменении адреса.\r\n\r\n\r\nКак работает router? Перед инициализацией приложения и созданием всех компонентов, роутер \"смотрит\" url броузера, и сравнивает его с ключами из параметра `routes`\r\nзатем найдя соответствие, добавляет все компоненты которых нет в поле  'first' (за исключением виртуальных массивов) в объект fetchComponents (см. выше #fetchComponents),\r\nтаким образом он перестраивает описание приложения в зависимости от текущего url, те компоненты (за исключением виртуальных массивов) для которых шаблоны отдаются на данном url,\r\nмы указываем в поле first - они создадутся сразу после загрузки страницы, а те компоненты для которых нет шаблонов на данном адресе, будут добавлены автоматически в объект fetchComponents - роутером,\r\nони создадутся сразу после дозагрузки шаблонов из файла templatePath: \"/static/templates/index.html\".\r\n\r\n\r\nЗатем уже в ходе работы приложения мы используем функцию роутера `this.rootLink.router.setRout(url)` в которой мы меняем url, роутер сравнит новый url с ключами из параметра routes\r\nи найдя совпадение поменяет все компоненты из поля `routComponent`, на те которые должны быть на данном url. В Html разметке, теги где будут меняться отображение компонентов отмечаются\r\n`data-router_carts=router`, `data-router_main=\"router\"` и т.д. \r\n\r\n\r\nНапример:\r\n\r\n\r\n```javascript\r\n\r\nvar routes = {\r\n\t\r\n\t[\"/\"]: {\r\n\t\t\r\n\t\tfirst: [\"categories\", 'carts', \"menu\", \"home_page\"], \r\n\t\t/// компоненты которые есть в html файле указываются в этом массиве, остальные будут загружены с шаблона, в fetch запросе асинхронно\r\n\t\t\r\n\t\troutComponent: {\r\n\t\t\t\r\n\t\t\trouter_carts: \"carts\",   //компоненты соответствующие данному роуту\r\n\t\t\trouter_main: \"home_page\"\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\ttemplatePath: \"/static/templates/index.html\" // папка для загрузки шаблонов\r\n\t},\t\r\n\t\r\n\t[\"/cart/:idCart\"]: { //знак : в начале слова - говорит что это параметр и сравенение не требуется, проверяет только его наличие на данной позиции\r\n\t\t\r\n\t\tfirst: [\"categories\", 'cart_single', \"menu\", \"home_page\"], \r\n\t\troutComponent: {\r\n\t\t\trouter_carts: \"cart_single\",\r\n\t\t\trouter_main: \"home_page\",\r\n\t\t\t\r\n\t\t},\r\n\t\ttemplatePath: \"/static/templates/index.html\"\r\n\t},\r\n\t\r\n\t[\"/category/:idCategory\"]: { \r\n\t\t\r\n\t\tfirst: [\"categories\", 'carts', \"menu\", \"home_page\"], \r\n\t\troutComponent: {\r\n\t\t\t\r\n\t\t\trouter_carts: \"carts\",\r\n\t\t\trouter_main: \"home_page\"\r\n\t\t\t\r\n\t\t}, \r\n\t\ttemplatePath: \"/static/templates/index.html\" \r\n\t},\t\r\n\t\r\n\t\t[\"/create/category\"]: {\r\n\t\t\r\n\t\tfirst: [\"menu\", \"create_category\"], \r\n\t\troutComponent:{ \r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\trouter_main: \"create_category\"\r\n\t\t}, \r\n\t\ttemplatePath: \"/static/templates/index.html\" \r\n\t},\t\r\n\t\r\n\t\t\t[\"/create/cart/\"]: {\r\n\t\t\r\n\t\tfirst: [\"menu\", \"create_cart\"], \r\n\t\troutComponent:{ \r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\trouter_main: \"create_cart\"\r\n\t\t}, \r\n\t\ttemplatePath: \"/static/templates/index.html\" \r\n\t},\r\n\t\r\n\t\r\n}\r\n\r\n\r\n```\r\n\r\n\r\nВыше приведен фрагмент кода из <a href=\"https://github.com/SergeyOvechkin/lesson_2.2\">прототип SPA интернет магазина</a>\r\n\r\n\r\nВ нем каждый ключ это один из возможных url для данного приложения. Знак : в начале слова говорит что эта часть url - является параметром и с ней сравнения не требуется, требуется только ее присутствие на данной позиции.\r\nТакже есть знак * в конце слова, говорит только сравнивать все что до звездочки, далее игнорируется например если у нас есть несколько похожих адресов `/category1/json/ `,  `/category2/json/` и т.д. мы указываем в ключе `/category*/json/` и создаем один объект для описания роута, чтобы не дублировать код.\r\nЗнак `*` после слеша `/*` говорит не учитывать все что после слеша,  то есть если роут будет [\"/category/:categId/\"] то он может совпать только с `/category/cat_name/`, но не `/category/cat_name/other/`, а если поставить звездочку после слеша то совпадет, так как будет проверяться только наличие, но не количество\r\n\r\nДалее:\r\n\r\n* `first` - имена компонентов, которые есть в html разметке на данном адресе сервера, чтобы взять из них шаблоны. Используется при первой загрузке приложения.\r\n* `routComponen`- объект с названиями элементов в которых переключаются компоненты на данном url, например:\r\n```javascript\r\n\t\troutComponent: { //используется в методе `.setRout(historyUrl)` \r\n\t\t\t\r\n\t\t\trouter_carts: \"carts\",  //найдет div элемент в котором есть data-router_carts=\"router\" и на данном historyUrl вставит в него компонент carts\r\n\t\t\trouter_main: \"home_page\" // аналогично, найдет data-router_main=\"router\" и заменит все что в нем есть на \"home_page\"\r\n\t\t\t\r\n\t\t}, \r\n```\r\n\r\nТаким образом вызвав из любой точки `this.rootLink.router.setRout(historyUrl)` - мы не только изменим историю в броузере но и поменяем компоненты отображаемые на данном url в объекте `routComponent`,\r\nметод сравнит переданный historyUrl с картой ключей объекта `routes` и найдя совпадение поменяет отображаемые компоненты в соответствующих элементах страници.\r\nЕсли не найдет совпадение выдаст в консоли ошибку что не можен найти url. \r\n\r\n* `templatePath` - путь к файлу с шаблонами для компонентов, шаблонов которых нет на данном адресе url. Используется при первой загрузке приложения.\r\n"
}