{
  "title": "Добавление пользовательских событий",
  "text": "Добавим в html код контейнеров page из примера выше (#Добавление контейнеров в массив)  свойство - событие  listener_create_page с названием события \"emiter-create-page\" и свойство page_index с типом \"text\":\r\n\r\n\r\n```html\r\n\r\n<form data-create_page=\"container\" style=\"border: 1px solid blue; padding: 10px; margin: 10px;> <!-- ...без изменений... --> </form>\r\n\r\n<div data-pages=\"array\" style=\"border: 1px solid red; padding: 10px;\"> \r\n\t\r\n\t<div data-page=\"container\" data-page-listener_create_page=\"emiter-create-page\" style=\"border: 1px solid green\"> \r\n\t<!-- добавили свойство - слушателя события \"emiter-create-page\" -->\r\n\t\r\n\t\t<p data-page-paragraf=\"text\" data-page-my_class=\"class\">текст<p>\r\n\t\t\t\r\n\t\t<p>index= <span data-page-page_index=\"text\" > 0</span> </p> \r\n\t\t<!-- добавили свойство page_index для отображения меняющихся данных -->\r\n\t\t\t\r\n\t\t<button data-page-btn_click=\"click\">Кнопка</button>\t\t\t\t\r\n\t\t<button data-page-remove=\"click\">Удалить</button> \r\n\t\r\n\t</div>\r\n\t<!-- аналогично и для второго контейнера -->\r\n\t<div data-page=\"container\" data-page-listener_create_page=\"emiter-create-page\" style=\"border: 1px solid green\"> \r\n\t\t\r\n\t\t<p data-page-paragraf=\"text\" data-page-my_class=\"class\">текст<p>\t\t\t\r\n\t\t<p>index= <span data-page-page_index=\"text\" > 1</span> </p> \t\t\r\n\t\t<button data-page-btn_click=\"click\">Кнопка</button>\t\t\t\t\r\n\t\t<button data-page-remove=\"click\">Удалить</button>\r\n\t\r\n\t</div>\r\n</div>\t\t\r\n\t\r\n```\r\n\r\n\r\nТеперь изменим описание приложения:\r\n\r\n\r\n```javascript\r\n\r\nvar StateMap = {\r\n\t\t\t\t\t\r\n\tcreate_page: { \r\n\t\tcontainer: \"create_page\", \r\n\t\tprops: [\"text\", \"create\"], \r\n\t\tmethods: {\r\n\t\t\tcreate: function(){ \r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tevent.preventDefault(); \r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tvar text = this.parent.props.text.getProp();  \r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis.rootLink.state[\"pages\"].add({paragraf: text}, 0); //добавляем контейнер в начало массива, соответственно индекс всех остальных увеличивается на 1 \r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis.rootLink.eventProps[\"emiter-create-page\"].emit();\r\n\t\t\t\t\t//вызвали пользовательское событие \"emiter-create-page\"\tпри создании контейнера\t\r\n\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t},\r\n\r\n\tpages: {  \t\t\t\t\t\r\n\t\tcontainer: \"page\", \t\r\n\t\t//добавили свойства \"page_index\" и \"listener_create_page\"\r\n\t\tprops: [\"paragraf\", \"my_class\", \"btn_click\", \"remove\", \"page_index\", \"listener_create_page\"], \r\n\t\t\tmethods: {\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tbtn_click: function(){                       \r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\tconsole.log(this);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis.parent.props.paragraf.setProp(\"Новый текст\");  \t\t\t\t\t\t\t\r\n\t\t\t\t\tthis.parent.props.my_class.setProp(\"new_class\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t},\r\n\t\t\t\tremove: function(){ \t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis.parent.remove(); //удалили контейнер соответственно индекс контейнеров идущих после него уменьшился на 1 \r\n\t\t\t\t\tthis.rootLink.eventProps[\"emiter-create-page\"].emit(); \r\n\t\t\t\t\t//вызвали пользовательское событие \"emiter-create-page\" при удалении контейнера\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t},\r\n\t\t\t\t// добавили обработчик события \"emiter-create-page\" для свойства listener_create_page всех контейнеров\r\n\t\t\t\tlistener_create_page: function(){ \r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis.parent.props.page_index.setProp( this.parent.index );\r\n\t\t\t\t\t //обновили интерфейс всех контейнеров на основе меняющегося index\t\t\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t},\r\n\teventEmiters: {  //создали объект со всеми пользовательскими событиями приложения\r\n\t\t\t\t\t\r\n\t\t\t[\"emiter-create-page\"]: { //наше событие с начальными данными\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\tprop: \"\",\r\n\t\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nИтак после каждого создания либо удаления контейнера page мы вызываем событие \"emiter-create-page\" и все подписчики обновляют свои данные;\r\nТеперь если создать новый контейнер он получит index равный 2, а затем удалить нулевой контейнер с index 0 то созданный нами контейнер изменит index с 2 на 1 и мы с помощью пользовательского события обновим его интерфейс.\r\nТакже можно передавать новые данные в пользовательское событие, которые затем получат все слушатели в обработчиках событий  `this.emiter.prop`\r\n"
}