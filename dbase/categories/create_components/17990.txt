{
  "title": " Обновление  массива с различными вариантами шаблонов ",
  "text": "Рассмотрим ситуацию, когда необходимо отобразить сложный список, в каждом пункте которого, есть дополнительный вариант шаблона, например в некоторых пунктах есть параграф с дополнительным текстом, а в некоторых нет.\r\n\r\nДавайте создадим разметку для данного списка:\r\n\r\n```html\r\n\r\n<div class=\"container-fluid\">\r\n\t<div class=\"row\">\r\n\t\t<div class=\"col-12\">\r\n<!--------------------------------->  \r\n\r\n\t\t<div data-test_array=\"array\" class=\"row\">\r\n\t\t<!-- массив test_array с контейнерами списка test_container -->\r\n\t\t\r\n\t\t\t<div data-test_container=\"container\" class=\"card col-3\">\r\n\t\t\t\t<p data-test_container-main_text=\"text\">контейнер 1</p>\r\n\t\t\t\t<div data-test_container-variant=\"render-variant\"> <!-- свойство с типом render-variant - для отображения дополнительного шаблона -->\r\n\t\t\t\t\r\n\t\t\t\t     <div data-variant_cont_1=\"container\"> <!-- первый вариант шаблона -->\r\n\t\t\t\t\t\t<p data-variant_cont_1-text=\"text\" data-variant_cont_1-style=\"style\" > текст варианта 1 </p>\r\n\t\t\t\t\t </div>\r\n\t\t\t\t\t \r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div data-test_container=\"container\" class=\"card col-3\">\r\n\t\t\t\t<p data-test_container-main_text=\"text\">контейнер 2</p>\r\n\t\t\t\t<div data-test_container-variant=\"render-variant\">\r\n\t\t\t\t\r\n\t\t\t\t     <div data-variant_cont_2=\"container\"> <!-- второй вариант шаблона -->\r\n\t\t\t\t\t\t<p data-variant_cont_2-text=\"text\" data-variant_cont_2-style=\"style\" > текст варианта 2 </p>\r\n\t\t\t\t\t\t<p data-variant_cont_2-text2=\"text\">дополнительный текст</p>\r\n\t\t\t\t\t </div>\r\n\t\t\t\t\t \r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div data-test_container=\"container\" class=\"card col-3\">\r\n\t\t\t\t<p data-test_container-main_text=\"text\">контейнер 3</p>\r\n\t\t\t\t<div data-test_container-variant=\"render-variant\">\r\n\t\t\t\t\r\n\t\t\t\t     <div data-variant_cont_1=\"container\"> <!-- первый вариант шаблона -->\r\n\t\t\t\t\t\t<p data-variant_cont_1-text=\"text\" data-variant_cont_1-style=\"style\" > текст варианта 3 </p>\r\n\t\t\t\t\t </div>\r\n\t\t\t\t\t \r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\r\n\t\t</div>\r\n\r\n   \r\n <!--------------------------------->  \r\n\t\t</div>\t\r\n\t</div>\r\n</div>\r\n\r\n```\r\n\r\nИтак выше мы создали разметку которую выдает сервер при первом запросе\r\n\r\nДалее создадим описание приложения:\r\n\r\n\r\n```javascript\r\nvar StateMap = {\r\n\t\r\n\ttest_array: { //основной шаблон\r\n\t\t\r\n\t\tcontainer: \"test_container\",\r\n\t\tprops: [\"variant\", \"main_text\"],\r\n\t\tmethods: {\r\n\t\t\t\r\n\t\t\t\r\n\t\t},\t\t\r\n\t},\r\n\tvirtualArrayComponents: {\r\n\t\t\r\n\t\tvar_array_1:{\r\n\t\t\tcontainer: \"variant_cont_1\", //первый вариант дополнительного шаблона\r\n\t\t\tprops: [\"text\", \"style\"],\r\n\t\t\tmethods: {\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t},\r\n\t\tvar_array_2:{\r\n\t\t\tcontainer: \"variant_cont_2\", //второй вариант дополнительного шаблона\r\n\t\t\tprops: [\"text\", \"style\", \"text2\"],\r\n\t\t\tmethods: {\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t},\t\t\t\r\n\t}\t\r\n}\r\n\r\nwindow.onload = function(){\r\n\t\r\n\tvar HM = new HtmlixState(StateMap);\r\n\t\r\n\tconsole.log(HM);\r\n\t\r\n\tconsole.log(HM.state[\"test_array\"].getAll());\r\n\t\r\n\t\t\r\n}\r\n\r\n\r\n```\r\n\r\nИтак мы создали приложение со всеми компонентами, которые затем вывели в консоль.\r\n\r\nТепреь к примеру мы нажали на кнопку пагинации и перешли на другую страницу, и сервер нам прислал в fetch запроссе json объект с данными для новой страници:\r\n\r\n\r\n\r\n```javascript\r\n\r\n\tvar resp = [\r\n\t\r\n\t{main_text: \"Название 1\", variant: {componentName: \"var_array_2\", text: \"оновной текст 1\", style: \"color: red;\", text2: \"дополнительный текст1\"} },\r\n\t{main_text: \"название 2\", variant: {componentName: \"var_array_1\", text: \"оновной текст 2\", style: \"color: yellow;\"} },\r\n\t{main_text: \"название 3\", variant: {componentName: \"var_array_2\", text: \"оновной текст 3\", style: \"color: red;\", text2: \"дополнительный текст2\"} },\r\n\t{main_text: \"название 2\", variant: {componentName: \"var_array_1\", text: \"оновной текст 2\", style: \"color: yellow;\"} },\r\n\t\r\n\t];\r\n\r\n\r\n```\r\n\r\nИтак мы получили новые данные с сервера, ключами которых являются названия свойств, первое свойство основного шаблона у нас main_text с типом \"text\", а второе свойство \r\nэто  variant с типом \"render-variant\" в него сервер вложил объект с данными для дополнительного шаблона, а также имя дополнительного шаблона componentName,\r\n\r\n\r\nТеперь нам необходимо обновить интерфейс на основании полученных данных, первый способ это удалить все из массива вызвав метод .removeAll() в массиве,\r\nзатем в цикле добавлять новые контейнеры conainer = test_array.add(newProps), потом в каждом контейнере удалить старый вариант шаблона conainer.variant.renderChild.remove(true);\r\nзатем создать новый вариант шаблона templ = rootLink.state[componentName].add(newProps); Затем добавить в контейнер новый вариант conainer.variant.renderByContainer(templ);\r\n\r\n\r\nИ второй более легкий способ это вызвать:  `HM.state[\"test_array\"].reuseAll(resp)`; \r\nс новыми данными сервера. Как он работает? во первых в ответе с сервера ключи объектов, должны совпадать с названиями свойств, во вторых, должно присутствовать имя отображаемого компонента\r\n componentName для свойств с типом \"render-variant\", таким образом мы просто вызываем метод setProp() на каждом свойстве и передаем в него данные с ключа объекта, в ключе variant мы передаем обязательное поле  componentName с именем виртуального массива,\r\n остальные поля являются необязательными и если их не указать он возьмет их из шаблона.\r\n \r\n Итак изменим код описания приложения:\r\n \r\n ```javascript\r\n \r\n window.onload = function(){\r\n\t\r\n\tvar HM = new HtmlixState(StateMap);\r\n\t\r\n\t\r\n\tvar resp = [\r\n\t\r\n\t{main_text: \"Название 1\", variant: {componentName: \"var_array_2\", text: \"оновной текст 1\", style: \"color: red;\", text2: \"дополнительный текст1\"} },\r\n\t{main_text: \"название 2\", variant: {componentName: \"var_array_1\", text: \"оновной текст 2\", style: \"color: yellow;\"} },\r\n\t{main_text: \"название 3\", variant: {componentName: \"var_array_2\", text: \"оновной текст 3\", style: \"color: red;\", text2: \"дополнительный текст2\"} },\r\n\t{main_text: \"название 2\", variant: {componentName: \"var_array_1\", text: \"оновной текст 2\", style: \"color: yellow;\"} },\r\n\t\r\n\t];\r\n\t\r\n\twindow.setTimeout( function(){ \r\n\t\r\n\tHM.state[\"test_array\"].reuseAll(resp);\r\n\t\r\n\tconsole.log(HM.state[\"test_array\"].getAll());\r\n\t\r\n\t}, 2000);\r\n\t\r\n\t\r\n\t\r\n\tconsole.log(HM);\r\n\t\r\n\tconsole.log(HM.state[\"test_array\"].getAll());\r\n\r\n\t\r\n}\r\n \r\n ```\r\n \r\n* <a href=\"https://github.com/SergeyOvechkin/tests/tree/master/render-variant-virtual-array\"> рабочий пример кода выше </a>\r\n \r\nТаким простым способом можно создавать различные ветвления, например если у каждого дополнительного варианта, будет еще какойто вариант или список с типом 'group' и т.д. \r\nприложение определит тип свойства которое мы хотим обновить и если ето \"render-variant\" оно сменит вариант шаблона на тот который мы указали в 'componentName' и установит ему свойства которые мы передали,\r\n а если это группа \"group\" то удалит все из группы и создаст новую из массива с объектами, который нужно будет разместить в значении ключа.\r\n\r\n\r\nТак работает не только метод .reuseAll(resp), для массива, но и метод setAllProps(obgWidthProps) для контейнера и setProp(newProp) для любого свойства."
}