{
  "title": "Наследование компонентов",
  "text": "Для наследования свойств контейнера другим контейнером необходимо указать поле  `container_extend`: \"`имя_наследуемого_компонента`\". В родительском компоненте также можно указать поле `share_props`: numb, где numb - число свойств массива props (счет идет с начала массива), которые позволяет наследовать родительский контейнер.\r\n\r\nПример использования: \r\n\r\n1. Создадим html разметку двух контейнеров: \r\n```\r\n\r\n\t\t\t<div data-test_container=\"container\" class=\"card col-3\" style=\"color: red;\">\r\n\t\t\t\r\n\t\t\t\t<p  data-test_container-main_text=\"text\">контейнер первый</p>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t<button data-test_container-click=\"click\">click </button>\r\n\t\t\t</div>\r\n\t\t\r\n\t\t\r\n\t\t   <div data-test_container_2=\"container\" class=\"card col-3\" style=\"color: red; margin-top: 10px;\">\r\n\t\t\t\r\n\t\t\t\t<p  data-test_container_2-main_text=\"text\">контейнер второй</p>\r\n\t\t\t\t\r\n\t\t\t\t<p  data-test_container_2-text2=\"text\">click there...</p>\r\n\t\t\t\t\r\n\t\t\t\t<button data-test_container_2-click=\"click\">click </button>\r\n\t\t\t</div>\r\n\r\n```\r\nВ html разметке второго контейнера, который наследует свойства первого, должны быть все наследуемые свойства первого контейнера с такими-же именами.\r\n\r\n2. Далее создадим описание приложения:\r\n```\r\nvar StateMap = {\r\n\t\r\n\ttest_container: {\r\n\t\t\r\n\t\tcontainer: \"test_container\",\r\n\t\t\r\n\t\t/// share_props - разрешает унаследовать только первые два свойства \"main_text\" и \"click\"\r\n\t\t///если не указать то можно будет унаследовать все свойства\r\n\t\tshare_props: 2,\r\n\t\tprops: [ \"main_text\", [\"click\", \"click\", \"button:first-of-type\"], [\"hover\", \"mouseover\", \"\"] ],\r\n\t\tmethods: {\r\n\t\t\t\r\n\t\t\tclick: function(){\r\n\t\t\t\t\r\n\t\t\t\tvar text = this.parent.props.main_text.getProp();\r\n\t\t\t\t\r\n\t\t\t\tthis.parent.props.main_text.setProp(text + \" 1\");\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\thover: function(){ //это свойство наследоваться не будет так как его номер в массиве = 3, а мы наследуем только первые два\r\n\t\t\t\t\r\n\t\t\t\tvar text = this.parent.props.main_text.getProp();\r\n\t\t\t\t\r\n\t\t\t\tthis.parent.props.main_text.setProp(text + \" 2\");\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t},\t\t\r\n\t},\r\n\ttest_container_2: {\r\n\t\t\r\n\t\tcontainer: \"test_container_2\",\r\n\t\t\r\n\t\t///наследует свойства контейнера - компонента test_container, \r\n\t\t//здесь указывается имя компонента из контейнера которого будут унаследованы свойства, \r\n\t\t//если бы это был контейнер из виртуального или обычного массива, нужно указать имя массива\r\n\t\tcontainer_extend: \"test_container\",\r\n\t\t\r\n\t\t///и добавляет два своих \"text2\", ['click2'\r\n\t\tprops: [\"text2\", ['click2', \"click\", \"[data-test_container_2-text2='text']\"] ],\r\n\t\tmethods: {\r\n\t\t\t\r\n\t\t\tclick2: function(){\r\n\t\t\t\t\r\n\t\t\t\tvar text = this.parent.props.main_text.getProp(); ///обращаемся в новом методе к свойству main_text которое унаследовали от контейнера test_container\r\n\t\t\t\t\r\n\t\t\t\tthis.parent.props.main_text.setProp(text + \" 2\");\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t},\t\t\r\n\t},\r\n\t\r\n\r\n}\r\n\r\n```\r\n\r\nИтак в примере выше мы унаследовали два первых свойства: \"main_text\"  и \"click\" из контейнера `test_container` и добавили два новых: \"text2\" и'click2.\r\n\r\n\r\n`Ограничения по наследованию`\r\n\r\nПри создании цепочки наследований наследуемые компоненты в описании приложения должны располагаться в той последовательности в которой\r\nони наследуют свойства. Например если у нас три контейнера и мы переместим 3-й контейнер который наследует свойства 2-го из данного списка вверх на позицию 1, он не унаследует свойства первого контейнера т.к. инициализируется раньше второго в котором еще нет свойств из контейнера 1.\r\n\r\nПри использовании fetchComponents наследование свойств от уже унаследованных компонентов, может вести себя непредсказуемо, поэтому лучше загружать недостающие шаблоны с помощью stateSettings:{ templateVar: templ,} \r\n\r\nВ контейнере сначала создаются унаследованные свойства, а затем собственные свойства, это необходимо  учитывать при объявлении `share_props`"
}