{
  "title": "Смена отображаемых компонентов - fetchComponents ",
  "text": "\r\nВ примере выше мы рассмотрели изменение отображаемых компонентов в свойстве с типом render-variant, шаблон для которого мы загружали из файла template.js, синхронным способом. При загрузке шаблонов данным способом, htmlix создает компоненты только после загрузки template.js файла, при небольших размерах данного файла, это может быть небольшое время. Недостаток данного метода может проявится например если у нас в index.html всего несколько компонентов, а в template.js очень много, и прейдется ждать пока они все загрузятся.  \r\n\r\nЧтобы избежать этого можно использовать второй метод создания приложения, это догрузка всех шаблонов вторым fetch запросом асинхронно. При данном способе htmlix не ждет загрузки всех шаблонов, а создает компоненты, для которых они уже есть в index.html. А те для которых нет посылает fetch запрос на дозагрузку шаблонов и создает их после того как они загрузятся. Таким образом приложение уже работает пока мы в фоновом режиме создаем остальные компоненты, незаметно для пользователя приложения.\r\n\r\nДавайте изменим пример выше и догрузим шаблон для компонента `variant2` в fetch запросе:\r\n\r\n```html\r\n<div data-page=\"container\">\r\n\t<div data-page-variant=\"render-variant\"> \r\n\t\r\n\t\t\t<div data-variant1=\"container\" >текст первого варианта</div>\r\n\t\r\n\t</div>\r\n\t<button data-page-click=\"click\">сменить вариант</button>\r\n</div> \r\n\r\n```\r\nДалее создадим файл template.html и добавим в него шаблон для компонента  variant2:\r\n\r\n```html\r\n\r\n<div data-variant2=\"container\" data-variant2-content=\"text\">текст второго варианта<div>\r\n\r\n\r\n```\r\nДобавили шаблон для variant2,  и добавили свойство content.\r\n\r\nТеперь изменим описание приложения:\r\n\r\n```javscript\r\n\t\r\n\tvar StateMap ={\r\n\t\t\tpage: {\r\n\t\t\t\tcontainer: \"page\",\r\n\t\t\t\tprops: [\"variant\", \"click\"],\r\n\t\t\t\tmethods: {\r\n\t\t\t\t\t\r\n\t\t\t\t\tclick: function(){\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tthis.parent.props.variant.setProp(\"variant2\"); //отображаем новый вариант\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t},\r\n\t\t\tvariant1: {\r\n\t\t\t\tcontainer: \"variant1\",\r\n\t\t\t\tprops: [],\r\n\t\t\t\tmethods: {\t\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t},\r\n\t\tfetchComponents: {\t//поместили компонент в специальный объект fetchComponents, это говорит о том что шаблоны для него нужно искать в файле - templatePath: \"./template.html\" после их загрузки.\r\n\t\t\tvariant2: {\r\n\t\t\t\tcontainer: \"variant2\",\r\n\t\t\t\tprops: [\"content\"],\r\n\t\t\t\tmethods: {\t\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t},\t\t\t\r\n\t\t}\r\n\t\tstateSettings: {\r\n\t\t\ttemplatePath: \"./template.html\"\r\n\t\t}\r\n\t}\r\n\r\n```\r\nИтак выше мы изменили описание приложения, теперь varian2 у нас помещен в объект fetchComponents что говорит о том что его нужно создать после того как догрузятся шаблоны из файла templatePath: \"./template.html\" который мы указали в настройках.\r\n\r\n\r\nПосле клика по кнопке мы меняем отображаемый компонент в свойстве. Можно не только поменять отображаемый компонент, но и сразу установить ему какие либо свойства: .setProp({componentName: \"variant2\", content: \"новый контент\"}) передав параметром объект с именем нового компонента componentName и данными для свойств.\r\n"
}